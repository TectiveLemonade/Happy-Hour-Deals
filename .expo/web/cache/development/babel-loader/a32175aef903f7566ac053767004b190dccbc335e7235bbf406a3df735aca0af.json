{"ast":null,"code":"import { configureStore, combineReducers } from '@reduxjs/toolkit';\nimport { persistStore, persistReducer, FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER } from 'redux-persist';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport authSlice from \"./slices/authSlice\";\nimport venueSlice from \"./slices/venueSlice\";\nimport searchSlice from \"./slices/searchSlice\";\nimport userSlice from \"./slices/userSlice\";\nimport cacheSlice from \"./slices/cacheSlice\";\nimport apiMiddleware from \"./middleware/apiMiddleware\";\nimport cacheMiddleware from \"./middleware/cacheMiddleware\";\nimport analyticsMiddleware from \"./middleware/analyticsMiddleware\";\nvar rootReducer = combineReducers({\n  auth: authSlice,\n  venues: venueSlice,\n  search: searchSlice,\n  user: userSlice,\n  cache: cacheSlice\n});\nvar persistConfig = {\n  key: 'root',\n  storage: AsyncStorage,\n  whitelist: ['auth', 'user'],\n  blacklist: ['venues', 'search', 'cache']\n};\nvar persistedReducer = persistReducer(persistConfig, rootReducer);\nexport var store = configureStore({\n  reducer: persistedReducer,\n  middleware: function middleware(getDefaultMiddleware) {\n    return getDefaultMiddleware({\n      serializableCheck: {\n        ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER]\n      }\n    }).concat([apiMiddleware, cacheMiddleware, analyticsMiddleware]);\n  },\n  devTools: __DEV__\n});\nexport var persistor = persistStore(store);\nexport { useAppDispatch, useAppSelector } from \"./hooks\";","map":{"version":3,"names":["configureStore","combineReducers","persistStore","persistReducer","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","AsyncStorage","authSlice","venueSlice","searchSlice","userSlice","cacheSlice","apiMiddleware","cacheMiddleware","analyticsMiddleware","rootReducer","auth","venues","search","user","cache","persistConfig","key","storage","whitelist","blacklist","persistedReducer","store","reducer","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","concat","devTools","__DEV__","persistor","useAppDispatch","useAppSelector"],"sources":["C:/Claude/Happy Hour App/src/store/index.ts"],"sourcesContent":["import {configureStore, combineReducers} from '@reduxjs/toolkit';\nimport {\n  persistStore,\n  persistReducer,\n  FLUSH,\n  REHYDRATE,\n  PAUSE,\n  PERSIST,\n  PURGE,\n  REGISTER,\n} from 'redux-persist';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\n\n// Import slices\nimport authSlice from './slices/authSlice';\nimport venueSlice from './slices/venueSlice';\nimport searchSlice from './slices/searchSlice';\nimport userSlice from './slices/userSlice';\nimport cacheSlice from './slices/cacheSlice';\n\n// Import middleware\nimport apiMiddleware from './middleware/apiMiddleware';\nimport cacheMiddleware from './middleware/cacheMiddleware';\nimport analyticsMiddleware from './middleware/analyticsMiddleware';\n\n// Root reducer\nconst rootReducer = combineReducers({\n  auth: authSlice,\n  venues: venueSlice,\n  search: searchSlice,\n  user: userSlice,\n  cache: cacheSlice,\n});\n\n// Persist configuration\nconst persistConfig = {\n  key: 'root',\n  storage: AsyncStorage,\n  whitelist: ['auth', 'user'], // Only persist auth and user data\n  blacklist: ['venues', 'search', 'cache'], // Don't persist temporary data\n};\n\n// Create persisted reducer\nconst persistedReducer = persistReducer(persistConfig, rootReducer);\n\n// Configure store\nexport const store = configureStore({\n  reducer: persistedReducer,\n  middleware: (getDefaultMiddleware) =>\n    getDefaultMiddleware({\n      serializableCheck: {\n        ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\n      },\n    }).concat([\n      apiMiddleware,\n      cacheMiddleware,\n      analyticsMiddleware,\n    ]),\n  devTools: __DEV__,\n});\n\n// Create persistor\nexport const persistor = persistStore(store);\n\n// Export types\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n\n// Export hooks\nexport {useAppDispatch, useAppSelector} from './hooks';"],"mappings":"AAAA,SAAQA,cAAc,EAAEC,eAAe,QAAO,kBAAkB;AAChE,SACEC,YAAY,EACZC,cAAc,EACdC,KAAK,EACLC,SAAS,EACTC,KAAK,EACLC,OAAO,EACPC,KAAK,EACLC,QAAQ,QACH,eAAe;AACtB,OAAOC,YAAY,MAAM,2CAA2C;AAGpE,OAAOC,SAAS;AAChB,OAAOC,UAAU;AACjB,OAAOC,WAAW;AAClB,OAAOC,SAAS;AAChB,OAAOC,UAAU;AAGjB,OAAOC,aAAa;AACpB,OAAOC,eAAe;AACtB,OAAOC,mBAAmB;AAG1B,IAAMC,WAAW,GAAGlB,eAAe,CAAC;EAClCmB,IAAI,EAAET,SAAS;EACfU,MAAM,EAAET,UAAU;EAClBU,MAAM,EAAET,WAAW;EACnBU,IAAI,EAAET,SAAS;EACfU,KAAK,EAAET;AACT,CAAC,CAAC;AAGF,IAAMU,aAAa,GAAG;EACpBC,GAAG,EAAE,MAAM;EACXC,OAAO,EAAEjB,YAAY;EACrBkB,SAAS,EAAE,CAAC,MAAM,EAAE,MAAM,CAAC;EAC3BC,SAAS,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,OAAO;AACzC,CAAC;AAGD,IAAMC,gBAAgB,GAAG3B,cAAc,CAACsB,aAAa,EAAEN,WAAW,CAAC;AAGnE,OAAO,IAAMY,KAAK,GAAG/B,cAAc,CAAC;EAClCgC,OAAO,EAAEF,gBAAgB;EACzBG,UAAU,EAAE,SAAZA,UAAUA,CAAGC,oBAAoB;IAAA,OAC/BA,oBAAoB,CAAC;MACnBC,iBAAiB,EAAE;QACjBC,cAAc,EAAE,CAAChC,KAAK,EAAEC,SAAS,EAAEC,KAAK,EAAEC,OAAO,EAAEC,KAAK,EAAEC,QAAQ;MACpE;IACF,CAAC,CAAC,CAAC4B,MAAM,CAAC,CACRrB,aAAa,EACbC,eAAe,EACfC,mBAAmB,CACpB,CAAC;EAAA;EACJoB,QAAQ,EAAEC;AACZ,CAAC,CAAC;AAGF,OAAO,IAAMC,SAAS,GAAGtC,YAAY,CAAC6B,KAAK,CAAC;AAO5C,SAAQU,cAAc,EAAEC,cAAc","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}