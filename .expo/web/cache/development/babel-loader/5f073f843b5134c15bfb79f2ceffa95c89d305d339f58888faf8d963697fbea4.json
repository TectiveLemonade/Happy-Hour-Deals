{"ast":null,"code":"import { clearExpiredEntries } from \"../slices/cacheSlice\";\nvar cacheMiddleware = function cacheMiddleware(store) {\n  return function (next) {\n    return function (action) {\n      var _action$type, _action$type2;\n      var result = next(action);\n      var state = store.getState();\n      var lastCleanup = state.cache.lastCleanup;\n      var fiveMinutes = 5 * 60 * 1000;\n      if (Date.now() - lastCleanup > fiveMinutes) {\n        store.dispatch(clearExpiredEntries());\n      }\n      if ((_action$type = action.type) != null && _action$type.includes('venues/searchVenues/fulfilled')) {\n        console.log('[Cache] Caching search results');\n      }\n      if ((_action$type2 = action.type) != null && _action$type2.includes('venues/getVenueDetails/fulfilled')) {\n        console.log('[Cache] Caching venue details');\n      }\n      return result;\n    };\n  };\n};\nexport default cacheMiddleware;","map":{"version":3,"names":["clearExpiredEntries","cacheMiddleware","store","next","action","_action$type","_action$type2","result","state","getState","lastCleanup","cache","fiveMinutes","Date","now","dispatch","type","includes","console","log"],"sources":["C:/Claude/Happy Hour App/src/store/middleware/cacheMiddleware.ts"],"sourcesContent":["import {Middleware} from '@reduxjs/toolkit';\nimport {RootState} from '../index';\nimport {clearExpiredEntries} from '../slices/cacheSlice';\n\n// Cache middleware for automatic cache management\nconst cacheMiddleware: Middleware<{}, RootState> = (store) => (next) => (action) => {\n  const result = next(action);\n  \n  // Auto-cleanup expired cache entries every 5 minutes\n  const state = store.getState();\n  const lastCleanup = state.cache.lastCleanup;\n  const fiveMinutes = 5 * 60 * 1000;\n  \n  if (Date.now() - lastCleanup > fiveMinutes) {\n    store.dispatch(clearExpiredEntries());\n  }\n  \n  // Cache API responses automatically\n  if (action.type?.includes('venues/searchVenues/fulfilled')) {\n    // This would be handled by the venue slice\n    console.log('[Cache] Caching search results');\n  }\n  \n  if (action.type?.includes('venues/getVenueDetails/fulfilled')) {\n    // This would be handled by the venue slice\n    console.log('[Cache] Caching venue details');\n  }\n  \n  return result;\n};\n\nexport default cacheMiddleware;"],"mappings":"AAEA,SAAQA,mBAAmB;AAG3B,IAAMC,eAA0C,GAAG,SAA7CA,eAA0CA,CAAIC,KAAK;EAAA,OAAK,UAACC,IAAI;IAAA,OAAK,UAACC,MAAM,EAAK;MAAA,IAAAC,YAAA,EAAAC,aAAA;MAClF,IAAMC,MAAM,GAAGJ,IAAI,CAACC,MAAM,CAAC;MAG3B,IAAMI,KAAK,GAAGN,KAAK,CAACO,QAAQ,CAAC,CAAC;MAC9B,IAAMC,WAAW,GAAGF,KAAK,CAACG,KAAK,CAACD,WAAW;MAC3C,IAAME,WAAW,GAAG,CAAC,GAAG,EAAE,GAAG,IAAI;MAEjC,IAAIC,IAAI,CAACC,GAAG,CAAC,CAAC,GAAGJ,WAAW,GAAGE,WAAW,EAAE;QAC1CV,KAAK,CAACa,QAAQ,CAACf,mBAAmB,CAAC,CAAC,CAAC;MACvC;MAGA,KAAAK,YAAA,GAAID,MAAM,CAACY,IAAI,aAAXX,YAAA,CAAaY,QAAQ,CAAC,+BAA+B,CAAC,EAAE;QAE1DC,OAAO,CAACC,GAAG,CAAC,gCAAgC,CAAC;MAC/C;MAEA,KAAAb,aAAA,GAAIF,MAAM,CAACY,IAAI,aAAXV,aAAA,CAAaW,QAAQ,CAAC,kCAAkC,CAAC,EAAE;QAE7DC,OAAO,CAACC,GAAG,CAAC,+BAA+B,CAAC;MAC9C;MAEA,OAAOZ,MAAM;IACf,CAAC;EAAA;AAAA;AAED,eAAeN,eAAe","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}